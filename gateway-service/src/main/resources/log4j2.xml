<?xml version="1.0" encoding="UTF-8"?>

<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->

<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->

<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->

<configuration status="WARN" monitorInterval="30">

    <!-- 常量引用 -->
    <properties>
        <property name="LOG_HOME">logs/</property>
        <property name="LOG_NAME">cloud-gateway</property>
        <!--<property name="FORMAT">%d{yyyy-MM-dd HH:mm:ss} [%traceId] %-5p %c{1}:%L - %m%n</property>-->
        <property name="FORMAT">%d %-5p %c:%L - %m%n</property>
    </properties>


    <!--先定义所有的appender-->

    <appenders>
        <!--这个输出控制台的配置-->
        <console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout pattern="${FORMAT}"/>
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
        </console>

        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用-->
        <!--<File name="log" fileName="${LOG_HOME}/${LOG_NAME}-test.log" append="false">
            <PatternLayout pattern="${FORMAT}"/>
        </File>-->

        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileInfo" fileName="${LOG_HOME}/${LOG_NAME}-info.log"
                     filePattern="${LOG_HOME}/bak/$${date:yyyy-MM}/${LOG_NAME}-info-%d{yyyy-MM-dd}-%i.log">
            <!--${sys:user.home}/logs/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log-->
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${FORMAT}"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <!-- 基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小 -->
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>

        </RollingFile>


        <!--错误日志-->
        <RollingFile name="RollingFileError" fileName="${LOG_HOME}/${LOG_NAME}-error.log"
                     filePattern="${LOG_HOME}/bak/$${date:yyyy-MM}/${LOG_NAME}-error-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${FORMAT}"/>

            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>

        </RollingFile>

        <!--配置access log-->
        <RollingRandomAccessFile  name="RollingAccessLog"
                                  immediateFlush="false"
                                  fileName="${LOG_HOME}/${LOG_NAME}-access.log"
                                  filePattern="${LOG_HOME}/bak/$${date:yyyy-MM}/${LOG_NAME}-access-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${FORMAT}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval = "2"/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingRandomAccessFile>

    </appenders>



    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <!--若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。-->
        <logger name="org.springframework" level="INFO" additivity="false">
            <AppenderRef ref="Console"/>
        </logger>


        <!--异步日志-->
        <AsyncLogger name="reactor.netty.http.server.AccessLog" level="INFO" additivity="false">
            <AppenderRef ref="RollingAccessLog"/>
        </AsyncLogger>


        <root level="all">
            <appender-ref ref="Console"/>

            <appender-ref ref="RollingFileInfo"/>

            <appender-ref ref="RollingFileError"/>
        </root>

    </loggers>

</configuration>